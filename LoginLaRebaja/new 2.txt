"""
Script para automatizar el login en la tienda virtual.
Registra tiempos de carga y realiza el proceso de inicio y cierre de sesión y los guarda en Google Sheets.
"""

import logging
import time
import socket
from datetime import datetime
from typing import Callable, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Configurar logging
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

# Configuración de Selenium y Google Sheets
CHROMEDRIVER_PATH = r"C:\\Users\\mreyes\\Documents\\LoginLaRebaja\\chromedriver-win64\\chromedriver.exe"
CREDENTIALS_PATH = r"C:\\Users\\mreyes\\Documents\\LoginLaRebaja\\silicon-park-451318-q3-2e720cc1e169.json"
SPREADSHEET_ID = "1EcCiF1nRMfqKgHv7z4wPxy-QRvW1z2-sLQXlZSvgDgw"
SHEET_NAME = "TiemposAutomatización"

# Obtener la IP del equipo
def obtener_ip() -> str:
    try:
        return socket.gethostbyname(socket.gethostname())
    except Exception as e:
        logging.error("Error obteniendo la IP: %s", e)
        return "Desconocida"

# Iniciar el driver
def iniciar_driver() -> Optional[webdriver.Chrome]:
    try:
        options = webdriver.ChromeOptions()
        options.add_argument("--start-maximized")
        options.add_argument("--ignore-certificate-errors")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        service = Service(CHROMEDRIVER_PATH)
        return webdriver.Chrome(service=service, options=options)
    except WebDriverException as e:
        logging.error("Error al iniciar el driver: %s", e)
        return None

# Decorador para medir tiempos
def medir_tiempo(func: Callable[..., None]) -> Callable[..., Optional[float]]:
    def wrapper(*args, **kwargs) -> Optional[float]:
        inicio = time.time()
        try:
            func(*args, **kwargs)
        except (TimeoutException, NoSuchElementException, WebDriverException) as e:
            logging.error("Error en %s: %s", func.__name__, e)
            return None
        fin = time.time()
        duracion = round(fin - inicio, 3)
        logging.info("Tiempo de %s: %.3f segundos", func.__name__, duracion)
        print(f"Tiempo de {func.__name__}: {duracion} segundos")
        return duracion
    return wrapper

@medir_tiempo
def abrir_pagina(driver: webdriver.Chrome):
    driver.get("https://www.larebajavirtual.com/")
    WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

@medir_tiempo
def clic_mi_cuenta(driver: webdriver.Chrome):
    boton = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "/html/body/div[2]/div/div[1]/div/div/div[2]/div/div[2]/div/div[6]/div/div/button/div/span/div/div/span"))
    )
    boton.click()

@medir_tiempo
def ingresar_credenciales(driver: webdriver.Chrome):
    user_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//input[@formcontrolname='email']")))
    pass_input = driver.find_element(By.XPATH, "//input[@formcontrolname='password']")
    user_input.send_keys("pruebaslogin360@gmail.com")
    pass_input.send_keys("Clave12345678*")

@medir_tiempo
def clic_ingresar(driver: webdriver.Chrome):
    boton = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "/html/body/app-root/div/app-login/div/div/div/div/form/button/span"))
    )
    boton.click()

@medir_tiempo
def confirmar_login(driver: webdriver.Chrome):
    boton = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//div[text()='Confirmar']")))
    boton.click()

@medir_tiempo
def salir_cuenta(driver: webdriver.Chrome):
    boton_cuenta = WebDriverWait(driver, 15).until(
        EC.element_to_be_clickable((By.XPATH, "(//div[@class='vtex-button__label flex items-center justify-center h-100 ph6 '])[1]"))
    )
    boton_cuenta.click()
    boton_salir = WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH, "//*[text()='Salir']")))
    boton_salir.click()

@medir_tiempo
def autenticado_salir(driver: webdriver.Chrome):
    boton_salir = WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH, "//*[text()='Salir']")))
    boton_salir.click()

def cerrar_navegador(driver: webdriver.Chrome):
    driver.quit()

def guardar_en_google_sheets(datos: list):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        sheet.append_row(datos)
        logging.info("Datos guardados en Google Sheets correctamente.")
    except Exception as e:
        logging.error("Error al guardar en Google Sheets: %s", e)

if __name__ == "__main__":
    DRIVER = iniciar_driver()
    if not DRIVER:
        exit()
    DIA = datetime.now().strftime("%Y-%m-%d")
    HORA_DE_INICIO = datetime.now().strftime("%H:%M:%S")
    USUARIO = "pruebaslogin360@gmail.com"
    IP = obtener_ip()
    TIEMPO_RENDERIZADO_FORMULARIO_LOGIN = abrir_pagina(DRIVER)
    TIEMPO_RENDERIZADO_HOME = clic_mi_cuenta(DRIVER)
    ingresar_credenciales(DRIVER)
    clic_ingresar(DRIVER)
    confirmar_login(DRIVER)
    time.sleep(5)
    TIEMPO_CERRAR_MI_CUENTA = salir_cuenta(DRIVER)
    TIEMPO_AUTENTICADO_SALIR = autenticado_salir(DRIVER)
    ESTADO = "Exitoso" if TIEMPO_RENDERIZADO_FORMULARIO_LOGIN else "Fallido"

    # Imprimir los datos antes de guardar
    print("\nDatos a guardar en Google Sheets:")
    print(f"Día: {DIA}, Hora de Inicio: {HORA_DE_INICIO}, Usuario: {USUARIO}, IP: {IP}")
    print(f"Tiempo de Renderizado Formulario Login: {TIEMPO_RENDERIZADO_FORMULARIO_LOGIN}")
    print(f"Tiempo hasta Renderizado Home: {TIEMPO_RENDERIZADO_HOME}")
    print(f"Tiempo miCuenta_Salir: {TIEMPO_CERRAR_MI_CUENTA}")
    print(f"Tiempo autenticado_Salir: {TIEMPO_AUTENTICADO_SALIR}")
    print(f"Estado: {ESTADO}")

    DATOS = [DIA, HORA_DE_INICIO, USUARIO, IP, TIEMPO_RENDERIZADO_FORMULARIO_LOGIN, TIEMPO_RENDERIZADO_HOME, TIEMPO_CERRAR_MI_CUENTA, TIEMPO_AUTENTICADO_SALIR, ESTADO]
    guardar_en_google_sheets(DATOS)
    cerrar_navegador(DRIVER)
